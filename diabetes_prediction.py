# -*- coding: utf-8 -*-
"""Diabetes Prediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1lm0hYpfG3X-P3cZuJnCrsTtzoOFbvuPg

Import Dependencies
"""

import numpy as np
import pandas as pd
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
from sklearn import svm
from sklearn.metrics import accuracy_score
import seaborn as sns
import matplotlib.pyplot as plt
import pickle

"""Import Data and do some EDA
PIMA diabetes dataset
"""

df = pd.read_csv('/content/diabetes.csv')

df.head()

"""### Some exploratory data analysis"""

df.shape

"""## measures and statistics"""

df.describe()

"""## What are the proportions"""

df['Outcome'].value_counts()

"""##Labels
*   0 - non-diabetic
*   1 - diabetic

### Mean values of the 2 outcomes
Some very obvious corr between glucose levels and possibly BMI.
"""

df.groupby('Outcome').mean()

"""### visualize the correlation"""

plt.figure(figsize=(11,11))
sns.heatmap(df.corr().round(1), annot=True)

## split the data
X = df.iloc[:, 0:8].values
y = df.iloc[:, -1].values

print(X)
print(y)

"""### standardize the data with standardscaler"""

scaler = StandardScaler()

scaler.fit(X)

# or use scaler.fit_transform instead of doing it separately
X_standard = scaler.transform(X)

print(X_standard)

X = X_standard

X_train, X_test, y_train, y_test = train_test_split(X, y, stratify=y, test_size=0.2, random_state=2)

# confirming the 20% split
print(X.shape, X_train.shape, X_test.shape)

"""## Train the model"""

classifier = svm.SVC(kernel='linear')
classifier.fit(X_train, y_train)

"""### Accuracy score"""

X_train_prediction = classifier.predict(X_train)
training_data_accuracy = accuracy_score(X_train_prediction, y_train)
print(training_data_accuracy)

X_test_prediction = classifier.predict(X_test)
test_data_accuracy = accuracy_score(X_test_prediction, y_test)
print(test_data_accuracy)

# test on a single data set
# positive case

positive_test_data_single = scaler.transform(np.asarray((10,168,74,0,0,38,0.537,34)).reshape(1,-1))
negative_test_data_single = scaler.transform(np.asarray((2,141,58,34,128,25.4,0.699,24)).reshape(1,-1))

predict_positive = classifier.predict(positive_test_data_single)
print(predict_positive)

predict_negative = classifier.predict(negative_test_data_single)
print(predict_negative)

"""## Save the classifier as a file for later use"""

pickle.dump(classifier, open('diabetes_svm_classifier.pkl','wb'))

